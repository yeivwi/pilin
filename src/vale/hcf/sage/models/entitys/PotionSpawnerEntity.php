<?php

declare(strict_types = 1);

namespace vale\hcf\sage\models\entitys;

use muqsit\invmenu\InvMenu;
use muqsit\invmenu\MenuIds;
use pocketmine\block\BoneBlock;
use pocketmine\entity\Human;
use pocketmine\event\entity\EntityDamageByEntityEvent;
use pocketmine\event\entity\EntityDamageEvent;
use pocketmine\event\entity\EntityDamageEventu;
use pocketmine\inventory\transaction\action\SlotChangeAction;
use pocketmine\item\Item;
use pocketmine\level\Level;
use pocketmine\nbt\tag\CompoundTag;
use pocketmine\nbt\tag\StringTag;
use pocketmine\Player;
use pocketmine\Server;
use vale\hcf\sage\models\util\CrystalInventory;
use vale\hcf\sage\models\util\IEManager;
use vale\hcf\sage\Sage;
use vale\hcf\sage\SagePlayer;

class PotionSpawnerEntity extends Human {


	const NETWORK_ID =  1;
	/**
	 * BaseEntity constructor.
	 *
	 * @param Level $level
	 * @param CompoundTag $nbt
	 * @param Player $player
	 *
	 */
	public function __construct(Level $level, CompoundTag $nbt) {
		$manager = new IEManager(Sage::getInstance(), "potion.png");
		$this->setSkin($manager->skin);
		parent::__construct($level, $nbt);
		$this->setMaxHealth(4);
		$this->setNameTag(self::getNPCName());
		$this->setNameTagAlwaysVisible(true);
		$this->setHealth(4);
		$this->setScale(1);
		$this->yaw = $this->getYaw();
		$this->getInventory()->setItemInHand(Item::get(Item::OBSERVER, 0, 1));
		$this->setCanSaveWithChunk(true);
	}

	/**
	 * @return string
	 */
	public function getName(): string {
		return "aCrystalBlackSmith";
	}

	/**
	 * @param EntityDamageEvent $event
	 * @priority NORMAL
	 */

	public function attack(EntityDamageEvent $event) : void
	{
		if ($event instanceof EntityDamageByEntityEvent) {
			$damager = $event->getDamager();
			if ($damager instanceof SagePlayer) {
				$entity = $event->getEntity();
				CrystalInventory::sendPotInv($damager);
				$event->setCancelled(true);
			}
		}
	}


	public static function getNPCName(): string{
		$line = [
			"ยง6PotionSpawner",
		];
		#foreach($val as $line){

		return ($line[0]);
		# }
	}

	public function entityBaseTick(int $tickDiff = 1): bool
	{
		return parent::entityBaseTick($tickDiff); // TODO: Change the autogenerated stub
	}
}




